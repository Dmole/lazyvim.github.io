"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1087],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>N});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(n),k=i,N=u["".concat(p,".").concat(k)]||u[k]||d[k]||r;return n?a.createElement(N,l(l({ref:t},s),{},{components:n})):a.createElement(N,l({ref:t},s))}));function N(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:2},l="\ud83d\udcf0 What's new?",o={unversionedId:"news",id:"news",title:"\ud83d\udcf0 What's new?",description:"11.x",source:"@site/docs/news.md",sourceDirName:".",slug:"/news",permalink:"/news",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/news.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udee0\ufe0f Installation",permalink:"/installation"},next:{title:"\u2328\ufe0f Keymaps",permalink:"/keymaps"}},p={},m=[{value:"11.x",id:"11x",level:2},{value:"10.x",id:"10x",level:2}],s={toc:m};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-whats-new"},"\ud83d\udcf0 What's new?"),(0,i.kt)("h2",{id:"11x"},"11.x"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Neovim >= 0.10")," now uses the much faster ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/folke/lazydev.nvim"},"lazydev.nvim"),"\ninstead of ",(0,i.kt)("inlineCode",{parentName:"p"},"neodev.nvim"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"moved ",(0,i.kt)("inlineCode",{parentName:"p"},"neoconf.nvim")," to extras. Project specific LSP settings\ncan be done with a ",(0,i.kt)("inlineCode",{parentName:"p"},".lazy.lua")," file instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mini.ai")," is back as a default plugin! Removing it was a mistake.\nIt's a great plugin that enhances the native text objects.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},":LazyExtras")," now has multiple new sections:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Enabled"),": extras that are currently enabled"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Recommended Languages"),": language extras recommended for the current buffer / directory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Recommended Plugins"),": extras that are recommended for most users"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Plugins"),": other plugin extras"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Languages"),": other language extras"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"new option ",(0,i.kt)("inlineCode",{parentName:"p"},"vim.g.deprecation_warnings")," to disable deprecation warnings\nDefaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". To enable deprecation warnings, set it to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"options.lua"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"vim-illuminate")," move to extras\nDocument highlights now use native lsp functionality by default"))),(0,i.kt)("p",null,"Since Neovim 0.10 has been released, I've been working on a new version of ",(0,i.kt)("strong",{parentName:"p"},"LazyVim"),"\nthat is fully compatible with all the latest Neovim features."),(0,i.kt)("p",null,"Additionally, some core plugins have been moved to extras."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"native snippets")," are now the default on Neovim 0.10\nOlder versions of Neovim will use the new ",(0,i.kt)("inlineCode",{parentName:"p"},"luasnip")," extra.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"native comments")," are now the default on Neovim 0.10\nOlder versions of Neovim will use the new ",(0,i.kt)("inlineCode",{parentName:"p"},"mini-comment")," extra.\n",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-ts-context-commentstring")," has been integrated in the native comments.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"inlay hints")," have been in ",(0,i.kt)("strong",{parentName:"p"},"LazyVim")," for a while, but are now\nenabled by default. To disable them:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-lspconfig",\n  opts = {\n    inlay_hints = { enabled = false },\n  }\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"plugins moved to extras:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mini.surround")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mini.indentscope")," scopes are now also highlighted with ",(0,i.kt)("inlineCode",{parentName:"li"},"indent-blankline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nvim-treesitter-context"))))),(0,i.kt)("h2",{id:"10x"},"10.x"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"added new extra for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-diff.md"},"mini.diff"),"\nThis is a plugin similar to gitsigns but with a neat diff overlay\nthat can be toggled with ",(0,i.kt)("inlineCode",{parentName:"p"},"<leader>go"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"trouble.nvim")," has been rewritten from scratch and is now in beta.\nI've added a new extra for it (",(0,i.kt)("inlineCode",{parentName:"p"},"trouble-v3"),") for those of you who want to try it out.\nYou can find the updated docs ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/folke/trouble.nvim/tree/dev"},"here"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("strong",{parentName:"p"},"lazygit")," integration now configures:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the theme based on the colorscheme"),(0,i.kt)("li",{parentName:"ul"},"nerd font icons (v3)"),(0,i.kt)("li",{parentName:"ul"},"editor preset is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"nvim-remote")," for better interop with Neovim"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The option ",(0,i.kt)("inlineCode",{parentName:"p"},"vim.g.lazygit_theme")," was renamed to ",(0,i.kt)("inlineCode",{parentName:"p"},"vim.g.lazygit_config"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"lazygit")," now automatically uses the colors of your current colorscheme.\nThis is enabled by default. To disable, add the below to your ",(0,i.kt)("inlineCode",{parentName:"p"},"options.lua"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"vim.g.lazygit_config = false\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added support for ",(0,i.kt)("inlineCode",{parentName:"p"},"basedpyright")," to the ",(0,i.kt)("strong",{parentName:"p"},"python")," extra.\nEnable in your ",(0,i.kt)("inlineCode",{parentName:"p"},"options.lua")," with:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'vim.g.lazyvim_python_lsp = "basedpyright"\n')),(0,i.kt)("p",{parentName:"li"},"Be aware that ",(0,i.kt)("inlineCode",{parentName:"p"},"basedpyright")," is still in development and\nmay not work exactly the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"pyright"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"User extras under ",(0,i.kt)("inlineCode",{parentName:"p"},"lua/plugins/extras")," can now also be managed\nwith ",(0,i.kt)("strong",{parentName:"p"},"LazyExtras"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nvim-ts-autotag")," is now included by default")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nvim-treesitter-context")," is now included by default")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added extra for ",(0,i.kt)("inlineCode",{parentName:"p"},"symbols-outline.nvim"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added extra for ",(0,i.kt)("inlineCode",{parentName:"p"},"aerial.nvim"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nvim-navic")," has been removed. If you want to keep using ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-navic"),",\nyou can enable the ",(0,i.kt)("strong",{parentName:"p"},"editor.navic")," extra")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New ",(0,i.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command for managing ",(0,i.kt)("strong",{parentName:"p"},"LazyVim")," extras")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Improved ",(0,i.kt)("strong",{parentName:"p"},"formatting"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"LazyVim")," can now work with multiple formatters. Types:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"primary"),": only one primary formatter can be active at a time.\n",(0,i.kt)("em",{parentName:"li"},"(conform, none-ls, LSP)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"secondary"),": multiple secondary formatters can be active ",(0,i.kt)("em",{parentName:"li"},"(eslint, ...)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"LazyVim")," automatically selects the primary formatter based on the\ncurrent available sources and priorities.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New ",(0,i.kt)("inlineCode",{parentName:"p"},":LazyFormat")," command for formatting the current selection or buffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New ",(0,i.kt)("inlineCode",{parentName:"p"},":LazyFormatInfo")," command for displaying the active formatters\nfor the current buffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Auto-formatting can be disabled with:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"vim.g.autoformat = false -- globally\nvim.b.autoformat = false -- buffer-local\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"none-ls.nvim")," is no longer installed by default"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"conform.nvim")," is now the default formatter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nvim-lint")," is now the default linter"),(0,i.kt)("li",{parentName:"ul"},"If you want to keep using ",(0,i.kt)("inlineCode",{parentName:"li"},"none-ls.nvim"),",\nyou can enable the ",(0,i.kt)("strong",{parentName:"li"},"lsp.none-ls")," extra"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"dashboard.nvim")," is the new default dashboard plugin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If you want to keep using ",(0,i.kt)("inlineCode",{parentName:"li"},"alpha.nvim"),", you can enable the ",(0,i.kt)("strong",{parentName:"li"},"ui.alpha")," extra"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Improved ",(0,i.kt)("strong",{parentName:"p"},"root detection"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New ",(0,i.kt)("inlineCode",{parentName:"p"},":LazyRoot")," command that shows info about the root dir detection")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Configurable with ",(0,i.kt)("inlineCode",{parentName:"p"},"vim.g.root_spec")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- LazyVim root dir detection\n-- Each entry can be:\n-- * the name of a detector function like `lsp` or `cwd`\n-- * a pattern or array of patterns like `.git` or `lua`.\n-- * a function with signature `function(buf) -> string|string[]`\nvim.g.root_spec = { "lsp", { ".git", "lua" }, "cwd" }\n\n-- To disable root detection set to just "cwd"\nvim.g.root_spec = { "cwd" }\n')))))))}u.isMDXComponent=!0}}]);