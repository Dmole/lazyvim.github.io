"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),p=l,y=d["".concat(s,".").concat(p)]||d[p]||m[p]||a;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),l=n(6010);const a="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,l.Z)(a,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),l=n(7294),a=n(6010),o=n(2466),i=n(6550),s=n(1980),u=n(7392),c=n(12);function d(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:l}}=e;return{value:t,label:n,attributes:r,default:l}}))}function m(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(a),(0,l.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=m(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[s,u]=y({queryString:n,groupId:r}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,c.Nk)(n);return[r,(0,l.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),b=(()=>{const e=s??d;return p({value:e,tabValues:a})?e:null})();(0,l.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var b=n(2389);const g="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),r=u[n].value;r!==i&&(d(t),s(r))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},o,{className:(0,a.Z)("tabs__item",h,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function x(e){const t=f(e);return l.createElement("div",{className:(0,a.Z)("tabs-container",g)},l.createElement(v,(0,r.Z)({},e,t)),l.createElement(k,(0,r.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return l.createElement(x,(0,r.Z)({key:String(t)},e))}},4154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(7462),l=(n(7294),n(3905)),a=n(4866),o=n(5162);const i={},s="Symbols Outline",u={unversionedId:"extras/editor/symbols-outline",id:"extras/editor/symbols-outline",title:"Symbols Outline",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/symbols-outline.md",sourceDirName:"extras/editor",slug:"/extras/editor/symbols-outline",permalink:"/extras/editor/symbols-outline",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/extras/editor/symbols-outline.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Outline",permalink:"/extras/editor/outline"},next:{title:"Trouble-v3",permalink:"/extras/editor/trouble-v3"}},c={},d=[{value:"symbols-outline.nvim",id:"symbols-outlinenvim",level:2},{value:"edgy.nvim <em>(optional)</em>",id:"edgynvim-optional",level:2}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"symbols-outline"},"Symbols Outline"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,l.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Alternatively, you can add it to your ",(0,l.kt)("code",null,"lazy.nvim")," imports"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.editor.symbols-outline" },\n    { import = "plugins" },\n  },\n})\n'))),(0,l.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,l.kt)("h2",{id:"symbols-outlinenvim"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/simrat39/symbols-outline.nvim"},"symbols-outline.nvim")),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local Config = require("lazyvim.config")\n  local defaults = require("symbols-outline.config").defaults\n  local opts = {\n    symbols = {},\n    symbol_blacklist = {},\n  }\n  local filter = Config.kind_filter\n\n  if type(filter) == "table" then\n    filter = filter.default\n    if type(filter) == "table" then\n      for kind, symbol in pairs(defaults.symbols) do\n        opts.symbols[kind] = {\n          icon = Config.icons.kinds[kind] or symbol.icon,\n          hl = symbol.hl,\n        }\n        if not vim.tbl_contains(filter, kind) then\n          table.insert(opts.symbol_blacklist, kind)\n        end\n      end\n    end\n  end\n  return opts\nend\n'))),(0,l.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "simrat39/symbols-outline.nvim",\n  keys = { { "<leader>cs", "<cmd>SymbolsOutline<cr>", desc = "Symbols Outline" } },\n  cmd = "SymbolsOutline",\n  opts = function()\n    local Config = require("lazyvim.config")\n    local defaults = require("symbols-outline.config").defaults\n    local opts = {\n      symbols = {},\n      symbol_blacklist = {},\n    }\n    local filter = Config.kind_filter\n\n    if type(filter) == "table" then\n      filter = filter.default\n      if type(filter) == "table" then\n        for kind, symbol in pairs(defaults.symbols) do\n          opts.symbols[kind] = {\n            icon = Config.icons.kinds[kind] or symbol.icon,\n            hl = symbol.hl,\n          }\n          if not vim.tbl_contains(filter, kind) then\n            table.insert(opts.symbol_blacklist, kind)\n          end\n        end\n      end\n    end\n    return opts\n  end,\n}\n')))),(0,l.kt)("h2",{id:"edgynvim-optional"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/folke/edgy.nvim"},"edgy.nvim")," ",(0,l.kt)("em",{parentName:"h2"},"(optional)")),(0,l.kt)("p",null," edgy integration"),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local edgy_idx = Util.plugin.extra_idx("ui.edgy")\n  local symbols_idx = Util.plugin.extra_idx("editor.symbols-outline")\n\n  if edgy_idx and edgy_idx > symbols_idx then\n    Util.warn(\n      "The `edgy.nvim` extra must be **imported** before the `symbols-outline.nvim` extra to work properly.",\n      {\n        title = "LazyVim",\n      }\n    )\n  end\n\n  opts.right = opts.right or {}\n  table.insert(opts.right, {\n    title = "Symbols Outline",\n    ft = "Outline",\n    pinned = true,\n    open = "SymbolsOutline",\n  })\nend\n'))),(0,l.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/edgy.nvim",\n  optional = true,\n  opts = function(_, opts)\n    local edgy_idx = Util.plugin.extra_idx("ui.edgy")\n    local symbols_idx = Util.plugin.extra_idx("editor.symbols-outline")\n\n    if edgy_idx and edgy_idx > symbols_idx then\n      Util.warn(\n        "The `edgy.nvim` extra must be **imported** before the `symbols-outline.nvim` extra to work properly.",\n        {\n          title = "LazyVim",\n        }\n      )\n    end\n\n    opts.right = opts.right or {}\n    table.insert(opts.right, {\n      title = "Symbols Outline",\n      ft = "Outline",\n      pinned = true,\n      open = "SymbolsOutline",\n    })\n  end,\n}\n')))))}p.isMDXComponent=!0}}]);