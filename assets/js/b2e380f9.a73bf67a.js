"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8256],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,f=d["".concat(c,".").concat(p)]||d[p]||m[p]||i;return t?a.createElement(f,o(o({ref:n},s),{},{components:t})):a.createElement(f,o({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),r=t(7294),i=t(6010),o=t(2466),l=t(6550),c=t(1980),u=t(7392),s=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,u]=f({queryString:t,groupId:a}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,s.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),b=(()=>{const e=c??d;return p({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var b=t(2389);const y="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:n,block:t,selectedValue:l,selectValue:c,tabValues:u}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const n=e.currentTarget,t=s.indexOf(n),a=u[t].value;a!==l&&(d(n),c(a))},p=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>s.push(e),onKeyDown:p,onClick:m},o,{className:(0,i.Z)("tabs__item",h,o?.className,{"tabs__item--active":l===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function w(e){const n=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",y)},r.createElement(v,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function x(e){const n=(0,b.Z)();return r.createElement(w,(0,a.Z)({key:String(n)},e))}},3e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),i=t(4866),o=t(5162);const l={},c="Mini-ai",u={unversionedId:"extras/coding/mini-ai",id:"extras/coding/mini-ai",title:"Mini-ai",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/coding/mini-ai.md",sourceDirName:"extras/coding",slug:"/extras/coding/mini-ai",permalink:"/extras/coding/mini-ai",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/coding/mini-ai.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Luasnip",permalink:"/extras/coding/luasnip"},next:{title:"Mini-comment",permalink:"/extras/coding/mini-comment"}},s={},d=[{value:"mini.ai",id:"miniai",level:2}],m={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mini-ai"},(0,r.kt)("inlineCode",{parentName:"h1"},"Mini-ai")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alternatively, you can add it to your ",(0,r.kt)("code",null,"lazy.nvim")," imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.coding.mini-ai" },\n    { import = "plugins" },\n  },\n})\n'))),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"miniai"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/echasnovski/mini.ai"},"mini.ai")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local ai = require("mini.ai")\n  return {\n    n_lines = 500,\n    custom_textobjects = {\n      o = ai.gen_spec.treesitter({\n        a = { "@block.outer", "@conditional.outer", "@loop.outer" },\n        i = { "@block.inner", "@conditional.inner", "@loop.inner" },\n      }, {}),\n      f = ai.gen_spec.treesitter({ a = "@function.outer", i = "@function.inner" }, {}),\n      c = ai.gen_spec.treesitter({ a = "@class.outer", i = "@class.inner" }, {}),\n      t = { "<([%p%w]-)%f[^<%w][^<>]->.-</%1>", "^<.->().*()</[^/]->$" },\n      d = { "%f[%d]%d+" }, -- digits\n      e = { -- Word with case\n        {\n          "%u[%l%d]+%f[^%l%d]",\n          "%f[%S][%l%d]+%f[^%l%d]",\n          "%f[%P][%l%d]+%f[^%l%d]",\n          "^[%l%d]+%f[^%l%d]",\n        },\n        "^().*()$",\n      },\n      g = function() -- Whole buffer, similar to `gg` and \'G\' motion\n        local from = { line = 1, col = 1 }\n        local to = {\n          line = vim.fn.line("$"),\n          col = math.max(vim.fn.getline("$"):len(), 1),\n        }\n        return { from = from, to = to }\n      end,\n      u = ai.gen_spec.function_call(), -- u for "Usage"\n      U = ai.gen_spec.function_call({ name_pattern = "[%w_]" }), -- without dot in function name\n    },\n  }\nend\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "echasnovski/mini.ai",\n  desc = "Enhanced text objects",\n  recommended = true,\n  -- keys = {\n  --   { "a", mode = { "x", "o" } },\n  --   { "i", mode = { "x", "o" } },\n  -- },\n  event = "VeryLazy",\n  opts = function()\n    local ai = require("mini.ai")\n    return {\n      n_lines = 500,\n      custom_textobjects = {\n        o = ai.gen_spec.treesitter({\n          a = { "@block.outer", "@conditional.outer", "@loop.outer" },\n          i = { "@block.inner", "@conditional.inner", "@loop.inner" },\n        }, {}),\n        f = ai.gen_spec.treesitter({ a = "@function.outer", i = "@function.inner" }, {}),\n        c = ai.gen_spec.treesitter({ a = "@class.outer", i = "@class.inner" }, {}),\n        t = { "<([%p%w]-)%f[^<%w][^<>]->.-</%1>", "^<.->().*()</[^/]->$" },\n        d = { "%f[%d]%d+" }, -- digits\n        e = { -- Word with case\n          {\n            "%u[%l%d]+%f[^%l%d]",\n            "%f[%S][%l%d]+%f[^%l%d]",\n            "%f[%P][%l%d]+%f[^%l%d]",\n            "^[%l%d]+%f[^%l%d]",\n          },\n          "^().*()$",\n        },\n        g = function() -- Whole buffer, similar to `gg` and \'G\' motion\n          local from = { line = 1, col = 1 }\n          local to = {\n            line = vim.fn.line("$"),\n            col = math.max(vim.fn.getline("$"):len(), 1),\n          }\n          return { from = from, to = to }\n        end,\n        u = ai.gen_spec.function_call(), -- u for "Usage"\n        U = ai.gen_spec.function_call({ name_pattern = "[%w_]" }), -- without dot in function name\n      },\n    }\n  end,\n  config = function(_, opts)\n    require("mini.ai").setup(opts)\n    -- register all text objects with which-key\n    LazyVim.on_load("which-key.nvim", function()\n      ---@type table<string, string|table>\n      local i = {\n        [" "] = "Whitespace",\n        [\'"\'] = \'Balanced "\',\n        ["\'"] = "Balanced \'",\n        ["`"] = "Balanced `",\n        ["("] = "Balanced (",\n        [")"] = "Balanced ) including white-space",\n        [">"] = "Balanced > including white-space",\n        ["<lt>"] = "Balanced <",\n        ["]"] = "Balanced ] including white-space",\n        ["["] = "Balanced [",\n        ["}"] = "Balanced } including white-space",\n        ["{"] = "Balanced {",\n        ["?"] = "User Prompt",\n        _ = "Underscore",\n        a = "Argument",\n        b = "Balanced ), ], }",\n        c = "Class",\n        d = "Digit(s)",\n        e = "Word in CamelCase & snake_case",\n        f = "Function",\n        g = "Entire file",\n        o = "Block, conditional, loop",\n        q = "Quote `, \\", \'",\n        t = "Tag",\n        u = "Use/call function & method",\n        U = "Use/call without dot in name",\n      }\n      local a = vim.deepcopy(i)\n      for k, v in pairs(a) do\n        a[k] = v:gsub(" including.*", "")\n      end\n\n      local ic = vim.deepcopy(i)\n      local ac = vim.deepcopy(a)\n      for key, name in pairs({ n = "Next", l = "Last" }) do\n        i[key] = vim.tbl_extend("force", { name = "Inside " .. name .. " textobject" }, ic)\n        a[key] = vim.tbl_extend("force", { name = "Around " .. name .. " textobject" }, ac)\n      end\n      require("which-key").register({\n        mode = { "o", "x" },\n        i = i,\n        a = a,\n      })\n    end)\n  end,\n}\n')))))}p.isMDXComponent=!0}}]);