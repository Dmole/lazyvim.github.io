"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[2121],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,p=d["".concat(s,".").concat(m)]||d[m]||f[m]||o;return t?r.createElement(p,l(l({ref:n},u),{},{components:t})):r.createElement(p,l({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>z});var r=t(7462),a=t(7294),o=t(6010),l=t(2466),i=t(6550),s=t(1980),c=t(7392),u=t(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function f(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=f(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[s,c]=p({queryString:t,groupId:r}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,u.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),y=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,o]),tabValues:o}}var y=t(2389);const _="tabList__CuJ",b="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),f=e=>{const n=e.currentTarget,t=u.indexOf(n),r=c[t].value;r!==i&&(d(n),s(r))},m=e=>{let n=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:f},l,{className:(0,o.Z)("tabs__item",b,l?.className,{"tabs__item--active":i===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function k(e){const n=g(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",_)},a.createElement(h,(0,r.Z)({},e,n)),a.createElement(v,(0,r.Z)({},e,n)))}function z(e){const n=(0,y.Z)();return a.createElement(k,(0,r.Z)({key:String(n)},e))}},1733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),o=t(4866),l=t(5162);const i={},s="Fzf",c={unversionedId:"extras/editor/fzf",id:"extras/editor/fzf",title:"Fzf",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/fzf.md",sourceDirName:"extras/editor",slug:"/extras/editor/fzf",permalink:"/extras/editor/fzf",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/editor/fzf.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dial",permalink:"/extras/editor/dial"},next:{title:"Harpoon2",permalink:"/extras/editor/harpoon2"}},u={},d=[{value:"fzf-lua",id:"fzf-lua",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"todo-comments.nvim <em>(optional)</em>",id:"todo-commentsnvim-optional",level:2}],f={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fzf"},(0,a.kt)("inlineCode",{parentName:"h1"},"Fzf")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,a.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Alternatively, you can add it to your ",(0,a.kt)("code",null,"lazy.nvim")," imports"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.editor.fzf" },\n    { import = "plugins" },\n  },\n})\n'))),(0,a.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,a.kt)("h2",{id:"fzf-lua"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/ibhagwan/fzf-lua"},"fzf-lua")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local config = require("fzf-lua.config")\n  local actions = require("fzf-lua.actions")\n\n  -- Quickfix\n  config.defaults.keymap.fzf["ctrl-q"] = "select-all+accept"\n  config.defaults.keymap.builtin["<c-f>"] = "preview-page-down"\n  config.defaults.keymap.builtin["<c-b>"] = "preview-page-up"\n\n  -- Trouble\n  config.defaults.actions.files["ctrl-t"] = require("trouble.sources.fzf").actions.open\n\n  -- Toggle root dir / cwd\n  config.defaults.actions.files["ctrl-r"] = function(_, ctx)\n    local o = vim.deepcopy(ctx.__call_opts)\n    o.root = o.root == false\n    o.cwd = nil\n    o.buf = ctx.__CTX.bufnr\n    LazyVim.pick.open(ctx.__INFO.cmd, o)\n  end\n  config.defaults.actions.files["alt-c"] = config.defaults.actions.files["ctrl-r"]\n\n  -- use the same prompt for all\n  local defaults = require("fzf-lua.profiles.default-title")\n  local function fix(t)\n    t.prompt = t.prompt ~= nil and "\uf105 " or nil\n    for _, v in pairs(t) do\n      if type(v) == "table" then\n        fix(v)\n      end\n    end\n  end\n  fix(defaults)\n\n  vim.api.nvim_set_hl(0, "FzfLuaPath", { link = "Directory", default = true })\n\n  return vim.tbl_deep_extend("force", opts, defaults, {\n    fzf_colors = true,\n    fzf_opts = {\n      ["--no-scrollbar"] = true,\n    },\n    winopts = {\n      preview = {\n        scrollchars = { "\u2503", "" },\n      },\n    },\n    files = {\n      cwd_prompt = false,\n      actions = {\n        ["alt-i"] = { actions.toggle_ignore },\n        ["alt-h"] = { actions.toggle_hidden },\n      },\n    },\n    grep = {\n      formatter = "path.hl",\n      actions = {\n        ["alt-i"] = { actions.toggle_ignore },\n        ["alt-h"] = { actions.toggle_hidden },\n      },\n    },\n    lsp = {\n      symbols = {\n        symbol_hl = function(s)\n          return "TroubleIcon" .. s\n        end,\n        symbol_fmt = function(s)\n          return s:lower() .. "\\t"\n        end,\n        child_prefix = false,\n      },\n    },\n    formatters = {\n      path = {\n        hl = {\n          _to = function()\n            local _, escseq = require("fzf-lua.utils").ansi_from_hl("FzfLuaPath", "foo")\n            return [[\n                return function(s, _, m)\n                  return "]] .. (escseq or "") .. [["\n                    .. s .. m.utils.ansi_escseq.clear\n                end\n              ]]\n          end,\n        },\n      },\n    },\n  })\nend\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "ibhagwan/fzf-lua",\n  event = "VeryLazy",\n  opts = function(_, opts)\n    local config = require("fzf-lua.config")\n    local actions = require("fzf-lua.actions")\n\n    -- Quickfix\n    config.defaults.keymap.fzf["ctrl-q"] = "select-all+accept"\n    config.defaults.keymap.builtin["<c-f>"] = "preview-page-down"\n    config.defaults.keymap.builtin["<c-b>"] = "preview-page-up"\n\n    -- Trouble\n    config.defaults.actions.files["ctrl-t"] = require("trouble.sources.fzf").actions.open\n\n    -- Toggle root dir / cwd\n    config.defaults.actions.files["ctrl-r"] = function(_, ctx)\n      local o = vim.deepcopy(ctx.__call_opts)\n      o.root = o.root == false\n      o.cwd = nil\n      o.buf = ctx.__CTX.bufnr\n      LazyVim.pick.open(ctx.__INFO.cmd, o)\n    end\n    config.defaults.actions.files["alt-c"] = config.defaults.actions.files["ctrl-r"]\n\n    -- use the same prompt for all\n    local defaults = require("fzf-lua.profiles.default-title")\n    local function fix(t)\n      t.prompt = t.prompt ~= nil and "\uf105 " or nil\n      for _, v in pairs(t) do\n        if type(v) == "table" then\n          fix(v)\n        end\n      end\n    end\n    fix(defaults)\n\n    vim.api.nvim_set_hl(0, "FzfLuaPath", { link = "Directory", default = true })\n\n    return vim.tbl_deep_extend("force", opts, defaults, {\n      fzf_colors = true,\n      fzf_opts = {\n        ["--no-scrollbar"] = true,\n      },\n      winopts = {\n        preview = {\n          scrollchars = { "\u2503", "" },\n        },\n      },\n      files = {\n        cwd_prompt = false,\n        actions = {\n          ["alt-i"] = { actions.toggle_ignore },\n          ["alt-h"] = { actions.toggle_hidden },\n        },\n      },\n      grep = {\n        formatter = "path.hl",\n        actions = {\n          ["alt-i"] = { actions.toggle_ignore },\n          ["alt-h"] = { actions.toggle_hidden },\n        },\n      },\n      lsp = {\n        symbols = {\n          symbol_hl = function(s)\n            return "TroubleIcon" .. s\n          end,\n          symbol_fmt = function(s)\n            return s:lower() .. "\\t"\n          end,\n          child_prefix = false,\n        },\n      },\n      formatters = {\n        path = {\n          hl = {\n            _to = function()\n              local _, escseq = require("fzf-lua.utils").ansi_from_hl("FzfLuaPath", "foo")\n              return [[\n                  return function(s, _, m)\n                    return "]] .. (escseq or "") .. [["\n                      .. s .. m.utils.ansi_escseq.clear\n                  end\n                ]]\n            end,\n          },\n        },\n      },\n    })\n  end,\n  keys = {\n    { "<esc>", "<cmd>close<cr>", ft = "fzf", mode = "t", nowait = true },\n    { "<c-j>", "<Down>", ft = "fzf", mode = "t", nowait = true },\n    { "<c-k>", "<Up>", ft = "fzf", mode = "t", nowait = true },\n    {\n      "<leader>,",\n      "<cmd>FzfLua buffers sort_mru=true sort_lastused=true<cr>",\n      desc = "Switch Buffer",\n    },\n    { "<leader>/", LazyVim.pick("live_grep"), desc = "Grep (Root Dir)" },\n    { "<leader>:", "<cmd>FzfLua command_history<cr>", desc = "Command History" },\n    { "<leader><space>", LazyVim.pick("auto"), desc = "Find Files (Root Dir)" },\n    -- find\n    { "<leader>fb", "<cmd>FzfLua buffers sort_mru=true sort_lastused=true<cr>", desc = "Buffers" },\n    { "<leader>fc", LazyVim.pick.config_files(), desc = "Find Config File" },\n    { "<leader>ff", LazyVim.pick("auto"), desc = "Find Files (Root Dir)" },\n    { "<leader>fF", LazyVim.pick("auto", { root = false }), desc = "Find Files (cwd)" },\n    { "<leader>fg", "<cmd>FzfLua git_files<cr>", desc = "Find Files (git-files)" },\n    { "<leader>fr", "<cmd>FzfLua oldfiles<cr>", desc = "Recent" },\n    { "<leader>fR", LazyVim.pick("oldfiles", { root = false }), desc = "Recent (cwd)" },\n    -- git\n    { "<leader>gc", "<cmd>FzfLua git_commits<CR>", desc = "Commits" },\n    { "<leader>gs", "<cmd>FzfLua git_status<CR>", desc = "Status" },\n    -- search\n    { \'<leader>s"\', "<cmd>FzfLua registers<cr>", desc = "Registers" },\n    { "<leader>sa", "<cmd>FzfLua autocmds<cr>", desc = "Auto Commands" },\n    { "<leader>sb", "<cmd>FzfLua grep_curbuf<cr>", desc = "Buffer" },\n    { "<leader>sc", "<cmd>FzfLua command_history<cr>", desc = "Command History" },\n    { "<leader>sC", "<cmd>FzfLua commands<cr>", desc = "Commands" },\n    { "<leader>sd", "<cmd>FzfLua diagnostics_document<cr>", desc = "Document Diagnostics" },\n    { "<leader>sD", "<cmd>FzfLua diagnostics_workspace<cr>", desc = "Workspace Diagnostics" },\n    { "<leader>sg", LazyVim.pick("live_grep"), desc = "Grep (Root Dir)" },\n    { "<leader>sG", LazyVim.pick("live_grep", { root = false }), desc = "Grep (cwd)" },\n    { "<leader>sh", "<cmd>FzfLua help_tags<cr>", desc = "Help Pages" },\n    { "<leader>sH", "<cmd>FzfLua highlights<cr>", desc = "Search Highlight Groups" },\n    { "<leader>sj", "<cmd>FzfLua jumps<cr>", desc = "Jumplist" },\n    { "<leader>sk", "<cmd>FzfLua keymaps<cr>", desc = "Key Maps" },\n    { "<leader>sl", "<cmd>FzfLua loclist<cr>", desc = "Location List" },\n    { "<leader>sM", "<cmd>FzfLua man_pages<cr>", desc = "Man Pages" },\n    { "<leader>sm", "<cmd>FzfLua marks<cr>", desc = "Jump to Mark" },\n    { "<leader>sR", "<cmd>FzfLua resume<cr>", desc = "Resume" },\n    { "<leader>sq", "<cmd>FzfLua quickfix<cr>", desc = "Quickfix List" },\n    { "<leader>sw", LazyVim.pick("grep_cword"), desc = "Word (Root Dir)" },\n    { "<leader>sW", LazyVim.pick("grep_cword", { root = false }), desc = "Word (cwd)" },\n    { "<leader>sw", LazyVim.pick("grep_visual"), mode = "v", desc = "Selection (Root Dir)" },\n    { "<leader>sW", LazyVim.pick("grep_visual", { root = false }), mode = "v", desc = "Selection (cwd)" },\n    { "<leader>uC", LazyVim.pick("colorschemes"), desc = "Colorscheme with Preview" },\n    {\n      "<leader>ss",\n      function()\n        require("fzf-lua").lsp_document_symbols({\n          regex_filter = symbols_filter,\n        })\n      end,\n      desc = "Goto Symbol",\n    },\n    {\n      "<leader>sS",\n      function()\n        require("fzf-lua").lsp_dynamic_workspace_symbols({\n          regex_filter = symbols_filter,\n        })\n      end,\n      desc = "Goto Symbol (Workspace)",\n    },\n  },\n}\n')))),(0,a.kt)("h2",{id:"nvim-lspconfig"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n  -- stylua: ignore\n  vim.list_extend(Keys, {\n    { "gd", "<cmd>FzfLua lsp_definitions     jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Definition", has = "definition" },\n    { "gr", "<cmd>FzfLua lsp_references      jump_to_single_result=true ignore_current_line=true<cr>", desc = "References", nowait = true },\n    { "gI", "<cmd>FzfLua lsp_implementations jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Implementation" },\n    { "gy", "<cmd>FzfLua lsp_typedefs        jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto T[y]pe Definition" },\n  })\nend\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = function()\n    local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n    -- stylua: ignore\n    vim.list_extend(Keys, {\n      { "gd", "<cmd>FzfLua lsp_definitions     jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Definition", has = "definition" },\n      { "gr", "<cmd>FzfLua lsp_references      jump_to_single_result=true ignore_current_line=true<cr>", desc = "References", nowait = true },\n      { "gI", "<cmd>FzfLua lsp_implementations jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Implementation" },\n      { "gy", "<cmd>FzfLua lsp_typedefs        jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto T[y]pe Definition" },\n    })\n  end,\n}\n')))),(0,a.kt)("h2",{id:"todo-commentsnvim-optional"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/todo-comments.nvim"},"todo-comments.nvim")," ",(0,a.kt)("em",{parentName:"h2"},"(optional)")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/todo-comments.nvim",\n  optional = true,\n  -- stylua: ignore\n  keys = {\n    { "<leader>st", function() require("todo-comments.fzf").todo() end, desc = "Todo" },\n    { "<leader>sT", function () require("todo-comments.fzf").todo({ keywords = { "TODO", "FIX", "FIXME" } }) end, desc = "Todo/Fix/Fixme" },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);