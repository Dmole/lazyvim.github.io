"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[5150],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||l;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),r=t(7294),l=t(6010),o=t(2466),i=t(6550),s=t(1980),u=t(7392),c=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=m(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[s,u]=f({queryString:t,groupId:a}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),h=(()=>{const e=s??d;return p({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var h=t(2389);const v="tabList__CuJ",b="tabItem_LNqP";function k(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==i&&(d(n),s(a))},p=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:m},o,{className:(0,l.Z)("tabs__item",b,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function _(e){const n=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",v)},r.createElement(k,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function x(e){const n=(0,h.Z)();return r.createElement(_,(0,a.Z)({key:String(n)},e))}},6897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),l=t(4866),o=t(5162);const i={},s="Editor",u={unversionedId:"plugins/editor",id:"plugins/editor",title:"Editor",description:"Includes the following extras",source:"@site/docs/plugins/editor.md",sourceDirName:"plugins",slug:"/plugins/editor",permalink:"/plugins/editor",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/editor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Colorscheme",permalink:"/plugins/colorscheme"},next:{title:"Formatting",permalink:"/plugins/formatting"}},c={},d=[{value:"Includes the following extras",id:"includes-the-following-extras",level:3},{value:"neo-tree.nvim",id:"neo-treenvim",level:2},{value:"nvim-spectre",id:"nvim-spectre",level:2},{value:"flash.nvim",id:"flashnvim",level:2},{value:"which-key.nvim",id:"which-keynvim",level:2},{value:"gitsigns.nvim",id:"gitsignsnvim",level:2},{value:"trouble.nvim",id:"troublenvim",level:2},{value:"todo-comments.nvim",id:"todo-commentsnvim",level:2}],m={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"editor"},"Editor"),(0,r.kt)("h3",{id:"includes-the-following-extras"},"Includes the following extras"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/extras/editor/fzf"},"editor.fzf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/extras/editor/telescope"},"editor.telescope"))),(0,r.kt)("h2",{id:"neo-treenvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neo-tree/neo-tree.nvim"},"neo-tree.nvim")),(0,r.kt)("p",null," file explorer"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  sources = { "filesystem", "buffers", "git_status" },\n  open_files_do_not_replace_types = { "terminal", "Trouble", "trouble", "qf", "Outline" },\n  filesystem = {\n    bind_to_cwd = false,\n    follow_current_file = { enabled = true },\n    use_libuv_file_watcher = true,\n  },\n  window = {\n    mappings = {\n      ["l"] = "open",\n      ["h"] = "close_node",\n      ["<space>"] = "none",\n      ["Y"] = {\n        function(state)\n          local node = state.tree:get_node()\n          local path = node:get_id()\n          vim.fn.setreg("+", path, "c")\n        end,\n        desc = "Copy Path to Clipboard",\n      },\n      ["O"] = {\n        function(state)\n          require("lazy.util").open(state.tree:get_node().path, { system = true })\n        end,\n        desc = "Open with System Application",\n      },\n      ["P"] = { "toggle_preview", config = { use_float = false } },\n    },\n  },\n  default_component_configs = {\n    indent = {\n      with_expanders = true, -- if nil and file nesting is enabled, will enable expanders\n      expander_collapsed = "\uf460",\n      expander_expanded = "\uf47c",\n      expander_highlight = "NeoTreeExpander",\n    },\n    git_status = {\n      symbols = {\n        unstaged = "\udb80\udd31",\n        staged = "\udb83\udc52",\n      },\n    },\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neo-tree/neo-tree.nvim",\n  branch = "v3.x",\n  cmd = "Neotree",\n  keys = {\n    {\n      "<leader>fe",\n      function()\n        require("neo-tree.command").execute({ toggle = true, dir = LazyVim.root() })\n      end,\n      desc = "Explorer NeoTree (Root Dir)",\n    },\n    {\n      "<leader>fE",\n      function()\n        require("neo-tree.command").execute({ toggle = true, dir = vim.uv.cwd() })\n      end,\n      desc = "Explorer NeoTree (cwd)",\n    },\n    { "<leader>e", "<leader>fe", desc = "Explorer NeoTree (Root Dir)", remap = true },\n    { "<leader>E", "<leader>fE", desc = "Explorer NeoTree (cwd)", remap = true },\n    {\n      "<leader>ge",\n      function()\n        require("neo-tree.command").execute({ source = "git_status", toggle = true })\n      end,\n      desc = "Git Explorer",\n    },\n    {\n      "<leader>be",\n      function()\n        require("neo-tree.command").execute({ source = "buffers", toggle = true })\n      end,\n      desc = "Buffer Explorer",\n    },\n  },\n  deactivate = function()\n    vim.cmd([[Neotree close]])\n  end,\n  init = function()\n    -- FIX: use `autocmd` for lazy-loading neo-tree instead of directly requiring it,\n    -- because `cwd` is not set up properly.\n    vim.api.nvim_create_autocmd("BufEnter", {\n      group = vim.api.nvim_create_augroup("Neotree_start_directory", { clear = true }),\n      desc = "Start Neo-tree with directory",\n      once = true,\n      callback = function()\n        if package.loaded["neo-tree"] then\n          return\n        else\n          local stats = vim.uv.fs_stat(vim.fn.argv(0))\n          if stats and stats.type == "directory" then\n            require("neo-tree")\n          end\n        end\n      end,\n    })\n  end,\n  opts = {\n    sources = { "filesystem", "buffers", "git_status" },\n    open_files_do_not_replace_types = { "terminal", "Trouble", "trouble", "qf", "Outline" },\n    filesystem = {\n      bind_to_cwd = false,\n      follow_current_file = { enabled = true },\n      use_libuv_file_watcher = true,\n    },\n    window = {\n      mappings = {\n        ["l"] = "open",\n        ["h"] = "close_node",\n        ["<space>"] = "none",\n        ["Y"] = {\n          function(state)\n            local node = state.tree:get_node()\n            local path = node:get_id()\n            vim.fn.setreg("+", path, "c")\n          end,\n          desc = "Copy Path to Clipboard",\n        },\n        ["O"] = {\n          function(state)\n            require("lazy.util").open(state.tree:get_node().path, { system = true })\n          end,\n          desc = "Open with System Application",\n        },\n        ["P"] = { "toggle_preview", config = { use_float = false } },\n      },\n    },\n    default_component_configs = {\n      indent = {\n        with_expanders = true, -- if nil and file nesting is enabled, will enable expanders\n        expander_collapsed = "\uf460",\n        expander_expanded = "\uf47c",\n        expander_highlight = "NeoTreeExpander",\n      },\n      git_status = {\n        symbols = {\n          unstaged = "\udb80\udd31",\n          staged = "\udb83\udc52",\n        },\n      },\n    },\n  },\n  config = function(_, opts)\n    local function on_move(data)\n      LazyVim.lsp.on_rename(data.source, data.destination)\n    end\n\n    local events = require("neo-tree.events")\n    opts.event_handlers = opts.event_handlers or {}\n    vim.list_extend(opts.event_handlers, {\n      { event = events.FILE_MOVED, handler = on_move },\n      { event = events.FILE_RENAMED, handler = on_move },\n    })\n    require("neo-tree").setup(opts)\n    vim.api.nvim_create_autocmd("TermClose", {\n      pattern = "*lazygit",\n      callback = function()\n        if package.loaded["neo-tree.sources.git_status"] then\n          require("neo-tree.sources.git_status").refresh()\n        end\n      end,\n    })\n  end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-spectre"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-pack/nvim-spectre"},"nvim-spectre")),(0,r.kt)("p",null," search/replace in multiple files"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { open_cmd = "noswapfile vnew" }\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-pack/nvim-spectre",\n  build = false,\n  cmd = "Spectre",\n  opts = { open_cmd = "noswapfile vnew" },\n  -- stylua: ignore\n  keys = {\n    { "<leader>sr", function() require("spectre").open() end, desc = "Replace in Files (Spectre)" },\n  },\n}\n')))),(0,r.kt)("h2",{id:"flashnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/folke/flash.nvim"},"flash.nvim")),(0,r.kt)("p",null," Flash enhances the built-in search functionality by showing labels\nat the end of each match, letting you quickly jump to a specific\nlocation."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/flash.nvim",\n  event = "VeryLazy",\n  vscode = true,\n  ---@type Flash.Config\n  opts = {},\n  -- stylua: ignore\n  keys = {\n    { "s", mode = { "n", "x", "o" }, function() require("flash").jump() end, desc = "Flash" },\n    { "S", mode = { "n", "o", "x" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },\n    { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },\n    { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },\n    { "<c-s>", mode = { "c" }, function() require("flash").toggle() end, desc = "Toggle Flash Search" },\n  },\n}\n')))),(0,r.kt)("h2",{id:"which-keynvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/folke/which-key.nvim"},"which-key.nvim")),(0,r.kt)("p",null," which-key helps you remember key bindings by showing a popup\nwith the active keybindings of the command you started typing."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  plugins = { spelling = true },\n  defaults = {\n    mode = { "n", "v" },\n    ["g"] = { name = "+goto" },\n    ["gs"] = { name = "+surround" },\n    ["z"] = { name = "+fold" },\n    ["]"] = { name = "+next" },\n    ["["] = { name = "+prev" },\n    ["<leader><tab>"] = { name = "+tabs" },\n    ["<leader>b"] = { name = "+buffer" },\n    ["<leader>c"] = { name = "+code" },\n    ["<leader>f"] = { name = "+file/find" },\n    ["<leader>g"] = { name = "+git" },\n    ["<leader>gh"] = { name = "+hunks", ["_"] = "which_key_ignore" },\n    ["<leader>q"] = { name = "+quit/session" },\n    ["<leader>s"] = { name = "+search" },\n    ["<leader>u"] = { name = "+ui" },\n    ["<leader>w"] = { name = "+windows" },\n    ["<leader>x"] = { name = "+diagnostics/quickfix" },\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/which-key.nvim",\n  event = "VeryLazy",\n  opts = {\n    plugins = { spelling = true },\n    defaults = {\n      mode = { "n", "v" },\n      ["g"] = { name = "+goto" },\n      ["gs"] = { name = "+surround" },\n      ["z"] = { name = "+fold" },\n      ["]"] = { name = "+next" },\n      ["["] = { name = "+prev" },\n      ["<leader><tab>"] = { name = "+tabs" },\n      ["<leader>b"] = { name = "+buffer" },\n      ["<leader>c"] = { name = "+code" },\n      ["<leader>f"] = { name = "+file/find" },\n      ["<leader>g"] = { name = "+git" },\n      ["<leader>gh"] = { name = "+hunks", ["_"] = "which_key_ignore" },\n      ["<leader>q"] = { name = "+quit/session" },\n      ["<leader>s"] = { name = "+search" },\n      ["<leader>u"] = { name = "+ui" },\n      ["<leader>w"] = { name = "+windows" },\n      ["<leader>x"] = { name = "+diagnostics/quickfix" },\n    },\n  },\n  config = function(_, opts)\n    local wk = require("which-key")\n    wk.setup(opts)\n    wk.register(opts.defaults)\n  end,\n}\n')))),(0,r.kt)("h2",{id:"gitsignsnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/lewis6991/gitsigns.nvim"},"gitsigns.nvim")),(0,r.kt)("p",null," git signs highlights text that has changed since the list\ngit commit, and also lets you interactively stage & unstage\nhunks in a commit."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  signs = {\n    add = { text = "\u258e" },\n    change = { text = "\u258e" },\n    delete = { text = "\uf0da" },\n    topdelete = { text = "\uf0da" },\n    changedelete = { text = "\u258e" },\n    untracked = { text = "\u258e" },\n  },\n  on_attach = function(buffer)\n    local gs = package.loaded.gitsigns\n\n    local function map(mode, l, r, desc)\n      vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n    end\n\n    -- stylua: ignore start\n    map("n", "]h", function()\n      if vim.wo.diff then\n        vim.cmd.normal({ "]c", bang = true })\n      else\n        gs.nav_hunk("next")\n      end\n    end, "Next Hunk")\n    map("n", "[h", function()\n      if vim.wo.diff then\n        vim.cmd.normal({ "[c", bang = true })\n      else\n        gs.nav_hunk("prev")\n      end\n    end, "Prev Hunk")\n    map("n", "]H", function() gs.nav_hunk("last") end, "Last Hunk")\n    map("n", "[H", function() gs.nav_hunk("first") end, "First Hunk")\n    map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")\n    map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")\n    map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")\n    map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")\n    map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")\n    map("n", "<leader>ghp", gs.preview_hunk_inline, "Preview Hunk Inline")\n    map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")\n    map("n", "<leader>ghB", function() gs.blame() end, "Blame Buffer")\n    map("n", "<leader>ghd", gs.diffthis, "Diff This")\n    map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")\n    map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")\n  end,\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "lewis6991/gitsigns.nvim",\n  event = "LazyFile",\n  opts = {\n    signs = {\n      add = { text = "\u258e" },\n      change = { text = "\u258e" },\n      delete = { text = "\uf0da" },\n      topdelete = { text = "\uf0da" },\n      changedelete = { text = "\u258e" },\n      untracked = { text = "\u258e" },\n    },\n    on_attach = function(buffer)\n      local gs = package.loaded.gitsigns\n\n      local function map(mode, l, r, desc)\n        vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n      end\n\n      -- stylua: ignore start\n      map("n", "]h", function()\n        if vim.wo.diff then\n          vim.cmd.normal({ "]c", bang = true })\n        else\n          gs.nav_hunk("next")\n        end\n      end, "Next Hunk")\n      map("n", "[h", function()\n        if vim.wo.diff then\n          vim.cmd.normal({ "[c", bang = true })\n        else\n          gs.nav_hunk("prev")\n        end\n      end, "Prev Hunk")\n      map("n", "]H", function() gs.nav_hunk("last") end, "Last Hunk")\n      map("n", "[H", function() gs.nav_hunk("first") end, "First Hunk")\n      map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")\n      map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")\n      map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")\n      map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")\n      map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")\n      map("n", "<leader>ghp", gs.preview_hunk_inline, "Preview Hunk Inline")\n      map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")\n      map("n", "<leader>ghB", function() gs.blame() end, "Blame Buffer")\n      map("n", "<leader>ghd", gs.diffthis, "Diff This")\n      map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")\n      map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")\n    end,\n  },\n}\n')))),(0,r.kt)("h2",{id:"troublenvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/folke/trouble.nvim"},"trouble.nvim")),(0,r.kt)("p",null," better diagnostics list and others"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/trouble.nvim",\n  cmd = { "Trouble" },\n  opts = {},\n  keys = {\n    { "<leader>xx", "<cmd>Trouble diagnostics toggle<cr>", desc = "Diagnostics (Trouble)" },\n    { "<leader>xX", "<cmd>Trouble diagnostics toggle filter.buf=0<cr>", desc = "Buffer Diagnostics (Trouble)" },\n    { "<leader>cs", "<cmd>Trouble symbols toggle focus=false<cr>", desc = "Symbols (Trouble)" },\n    {\n      "<leader>cS",\n      "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",\n      desc = "LSP references/definitions/... (Trouble)",\n    },\n    { "<leader>xL", "<cmd>Trouble loclist toggle<cr>", desc = "Location List (Trouble)" },\n    { "<leader>xQ", "<cmd>Trouble qflist toggle<cr>", desc = "Quickfix List (Trouble)" },\n    {\n      "[q",\n      function()\n        if require("trouble").is_open() then\n          require("trouble").prev({ skip_groups = true, jump = true })\n        else\n          local ok, err = pcall(vim.cmd.cprev)\n          if not ok then\n            vim.notify(err, vim.log.levels.ERROR)\n          end\n        end\n      end,\n      desc = "Previous Trouble/Quickfix Item",\n    },\n    {\n      "]q",\n      function()\n        if require("trouble").is_open() then\n          require("trouble").next({ skip_groups = true, jump = true })\n        else\n          local ok, err = pcall(vim.cmd.cnext)\n          if not ok then\n            vim.notify(err, vim.log.levels.ERROR)\n          end\n        end\n      end,\n      desc = "Next Trouble/Quickfix Item",\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"todo-commentsnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/folke/todo-comments.nvim"},"todo-comments.nvim")),(0,r.kt)("p",null," Finds and lists all of the TODO, HACK, BUG, etc comment\nin your project and loads them into a browsable list."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/todo-comments.nvim",\n  cmd = { "TodoTrouble", "TodoTelescope" },\n  event = "LazyFile",\n  opts = {},\n  -- stylua: ignore\n  keys = {\n    { "]t", function() require("todo-comments").jump_next() end, desc = "Next Todo Comment" },\n    { "[t", function() require("todo-comments").jump_prev() end, desc = "Previous Todo Comment" },\n    { "<leader>xt", "<cmd>Trouble todo toggle<cr>", desc = "Todo (Trouble)" },\n    { "<leader>xT", "<cmd>Trouble todo toggle filter = {tag = {TODO,FIX,FIXME}}<cr>", desc = "Todo/Fix/Fixme (Trouble)" },\n    { "<leader>st", "<cmd>TodoTelescope<cr>", desc = "Todo" },\n    { "<leader>sT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },\n  },\n}\n')))))}p.isMDXComponent=!0}}]);